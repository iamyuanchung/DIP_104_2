function EM = laplacianOfGaussian(G, filter_size)
% ####################################################################### %
% laplacianOfGaussian: Use Laplacian of Gaussian (LoG) for edge           %
%                      detection on the given 2D image matrix             %
%                                                                         %
%   Usage:                                                                %
%       EM = laplacianOfGaussian(G, filter_size)                          %
%                                                                         %
%   Description:                                                          %
%       Laplacian of Gaussian (LoG) is a popular 2nd order method for     %
%       edge detection by using its property of zero-crossing.            %
%       Usually, a Gaussian smoothing filter is used to filter the given  %
%       image G before Laplacian is applied in order to reduce its        %
%       sensitivity to noise.                                             %
%       However, this results in two rounds of convolution, including     %
%       the Gaussian filter and the Laplacian operation, which causes     %
%       heavy computation.                                                %
%       Since the convolution operation is associative, one can convolve  %
%       the Gaussian smoothing filter with the Laplacian filter first,    %
%       and then convolve this `hybrid filter` with G to achieve the      %
%       required result. We will refer to this `hybrid filter` as LoG     %
%       filter. By using LoG filter, only one round of convolution        %
%       operation with the image is needed.                               %
%       Currently, this function supports two kinds of LoG filters,       %
%       which are generated by setting £m = 1.4 for Gaussian with filter   %
%       size = 9 x 9 and 11 x 11.                                         %
%                                                                         %
%   Reference:                                                            %
%       [1] http://homepages.inf.ed.ac.uk/rbf/HIPR2/log.htm               %
% ####################################################################### %

% only support filter size = 9 or 11 currently
assert (filter_size == 9 || filter_size == 11);

[m, n] = size(G);

% extend the boundary of G
G_extend = wextend('2D', 'sym', G, (filter_size - 1) / 2);

% define the LoG filter according to the given filter size
if (filter_size == 9)
    F = [
        0, 1, 1, 2, 2, 2, 1, 1, 0;
        1, 2, 4, 5, 5, 5, 4, 2, 1;
        1, 4, 5, 3, 0, 3, 5, 4, 1;
        2, 5, 3, -12, -24, -12, 3, 5, 2;
        2, 5, 0, -24, -40, -24, 0, 5, 2;
        2, 5, 3, -12, -24, -12, 3, 5, 2;
        1, 4, 5, 3, 0, 3, 5, 4, 1;
        1, 2, 4, 5, 5, 5, 4, 2, 1;
        0, 1, 1, 2, 2, 2, 1, 1, 0
    ];
else
    F = [
        0, 0, 0, -1, -1, -2, -1, -1, 0, 0, 0;
        0, 0, -2, -4, -8, -9, -8, -4, -2, 0, 0;
        0, -2, -7, -15, -22, -23, -22, -15, -7, -2, 0;
        -1, -4, -15, -24, -14, -1, -14, -24, -15, -4, -1;
        -1, -8, -22, -14, 52, 103, 52, -14, -22, -8, -1;
        -2, -9, -23, -1, 103, 178, 103, -1, -23, -9, -2;
        -1, -8, -22, -14, 52, 103, 52, -14, -22, -8, -1;
        -1, -4, -15, -24, -14, -1, -14, -24, -15, -4, -1;
        0, -2, -7, -15, -22, -23, -22, -15, -7, -2, 0;
        0, 0, -2, -4, -8, -9, -8, -4, -2, 0, 0;
        0, 0, 0, -1, -1, -2, -1, -1, 0, 0, 0;
    ];
end

% convlove G_extand with the LoG filter F defined previously to approximate
% Gaussian smoothing and Laplacian simultaneously
EM = zeros(m, n);
for i = 1:m
    for j = 1:n
        EM(i, j) = sum(sum(G_extend(i:i + filter_size - 1, j:j + filter_size - 1) .* rot90(F, 2)));
    end
end