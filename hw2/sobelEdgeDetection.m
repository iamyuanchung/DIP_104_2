function [Gr, Gc, EM] = sobelEdgeDetection(G, T)
% ####################################################################### %
% sobelEdgeDetection: Perform Sobel edge detection on the given 2D image  %
%                     matrix                                              %
%                                                                         %
%   Usage:                                                                %
%       [Gr, Gc, EM] = sobelEdgeDetection(G, T)                           %
%                                                                         %
%   Description:                                                          %
%       Sobel edge detection is one of the most commonly used 1st order   %
%       methods for detecting the edges of objects in an image.           %
%       By convolving the given image G with two Sobel filters Kr and     %
%       Kc, the method generates the row and column gradients Gr and Gc.  %
%       The resulting gradient approximations G_grad can be combined      %
%       to give the gradient magnitude, using:                            %
%                                                                         %     
%            G_grad(i, j) = (Gr(i, j) ^ 2 + Gc(i, j) ^ 2) ^ 0.5           %
%                                                                         %
%       The given threshold T is used to decide how large the gradient    %
%       magnitude will be taken as edge, that is, the final edge map,     %
%       denoted as EM, is generated by:                                   %
%                                                                         %
%                   EM(i, j) = 255, if G_grad(i, j) >= T,                 %
%                              0,   else.                                 %
%                                                                         %
%   Reference:                                                            %
%       [1] https://en.wikipedia.org/wiki/Sobel_operator                  %
% ####################################################################### %

[m, n] = size(G);

% extend the boundary of G such that the resultant image will have the same size as G
G_extend = wextend('2D', 'sym', G, 1);

% create Gr and Gc for storing row and column gradients, respectively
Gr = zeros(m, n);
Gc = zeros(m, n);

% define the two sobel filters
Kr = [-1, 0, 1; -2, 0, 2; -1, 0, 1];
Kc = [1, 2, 1; 0, 0, 0; -1, -2, -1];

% perform sobel edge detection
for i = 1:m
    for j = 1:n
        % real convolution, not just the sum of element-wise product of two
        % matrices!
        Gr(i, j) = sum(sum(G_extend(i:i + 2, j:j + 2) .* rot90(Kr, 2)));
        Gc(i, j) = sum(sum(G_extend(i:i + 2, j:j + 2) .* rot90(Kc, 2)));
    end
end

% compute and store the gradient magnitude in G_grad
G_grad = (Gr .^ 2 + Gc .^ 2) .^ 0.5;

% only gradient pixel >= T will be taken as the edge pixels
EM = (G_grad >= T) * 255;